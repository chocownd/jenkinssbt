def sbt = 'export PATH=$PATH:$PWD/sbtbinary/bin && sbt'

pipeline {
    agent {
        docker {
//             image 'mozilla/sbt'
            image 'openjdk:8'
            args '-v $HOME/.cache:/.cache'
        }
    }
    stages {
        stage('Install sbt') {
            steps {
                sh 'ls -lah'
                sh 'rm -rf sbtbinary'
                sh 'mkdir sbtbinary'
                sh 'rm -f sbt-1.5.5.tgz'
                sh 'wget https://github.com/sbt/sbt/releases/download/v1.5.5/sbt-1.5.5.tgz'
                sh 'tar -zxvf sbt-1.5.5.tgz -C sbtbinary'
                sh 'rm -f sbt-1.5.5.tgz'
                sh 'ls -lah'
                sh 'pwd'
                sh 'export PATH=$PATH:$PWD/sbtbinary/bin && sbt --version'
                sh "${sbt} --version"
            }
        }
        stage('Sbt version') {
            steps {
                sh "${sbt} --version"
            }
        }
        stage('Clean') {
            steps {
                sh 'export PATH=$PATH:$PWD/sbt/bin && sbt "langTest/clean"'
            }
        }
        stage('Compile') {
            steps {
                sh 'export PATH=$PATH:$PWD/sbt/bin && sbt "langTest/compile"'
            }
        }
        stage('Run') {
            steps {
                sh 'export PATH=$PATH:$PWD/sbt/bin && sbt "langTest/run"'
            }
        }
        stage('Uber jar') {
            steps {
                sh 'export PATH=$PATH:$PWD/sbt/bin && sbt assembly'
            }
        }
        stage('Find Uber jar') {
            steps {
                sh 'ls -lah'
            }
        }
        stage('Where am I') {
            steps {
                sh 'pwd'
            }
        }
        stage('Execute Uber jar') {
            steps {
                sh 'java -jar ./lang-test/scala/target/scala-2.12/langTest-assembly-0.1.0-SNAPSHOT.jar'
            }
        }
        stage('Clean up') {
            steps {
                sh 'rm -rf sbtbinary'
            }
        }
    }
}
